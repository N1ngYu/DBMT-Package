// ---- Created with 3Dmigoto v1.3.16 on Wed May  7 20:05:07 2025

cbuffer _Globals : register(b0)
{
  row_major float4x4 u_world : packoffset(c0);
  float u_frame_time : packoffset(c4);
  row_major float4x4 u_proj : packoffset(c5);
  float4 u_fog_info : packoffset(c9);
  float u_fog_exp : packoffset(c10);
  float4 u_fog_color : packoffset(c11);
  float u_height_fog_density : packoffset(c12);
  float4 u_fog_add_info : packoffset(c13);
  float4 u_fog_add_param : packoffset(c14);
  float4 u_camera_position : packoffset(c15);
  float4 u_bone_vec[180] : packoffset(c16);
  row_major float4x4 u_uv0_trans : packoffset(c196);
  float4 u_head_direction : packoffset(c200);
  row_major float4x4 u_vp : packoffset(c201);
  float ShaderDepthBias : packoffset(c205);
  row_major float4x4 u_view : packoffset(c206);
  float ViewDepthFactor : packoffset(c210);
  row_major float4x4 u_lvp[4] : packoffset(c211);
  float diss_by_model_pos : packoffset(c227);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : TEXCOORD0,
  float4 v3 : COLOR0,
  float4 v4 : TANGENT0,
  uint4 v5 : BLENDINDICES0,
  float4 v6 : BLENDWEIGHT0,
  out float4 o0 : TEXCOORD1,
  out float4 o1 : TEXCOORD2,
  out float4 o2 : TEXCOORD3,
  out float2 o3 : TEXCOORD4,
  out float p3 : TEXCOORD12,
  out float4 o4 : TEXCOORD6,
  out float4 o5 : TEXCOORD10,
  out float4 o6 : TEXCOORD11,
  out float4 o7 : TEXCOORD14,
  out float3 o8 : TEXCOORD15,
  out float4 o9 : SV_Position0)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r1.xyz = float3(0,0,0);
  r2.xyz = float3(0,0,0);
  r0.xyzw = float4(0,0,0,0);
  while (true) {
    r1.w = cmp((int)r0.w >= 4);
    if (r1.w != 0) break;
    r1.w = -(int)r0.w;
    r3.xyz = cmp((uint3)r0.www < int3(1,2,3));
    r4.y = r3.y ? r1.w : 0;
    r5.xy = (int2)r0.ww + int2(-3,1);
    r4.z = r3.y ? 0 : r5.x;
    r4.w = cmp((int)r3.z == 0);
    r4.x = r3.x;
    r3.xyzw = r4.xyzw ? v5.xyzw : 0;
    r3.xy = (int2)r3.yw | (int2)r3.xz;
    r1.w = (int)r3.y | (int)r3.x;
    r2.w = (int)r1.w * 3;
    r3.x = dot(u_bone_vec[r2.w].xyz, v4.xyz);
    r4.xy = mad((int2)r1.ww, int2(3,3), int2(1,2));
    r3.y = dot(u_bone_vec[r4.x].xyz, v4.xyz);
    r3.z = dot(u_bone_vec[r4.y].xyz, v4.xyz);
    r6.x = dot(u_bone_vec[r2.w].xyz, v1.xyz);
    r6.y = dot(u_bone_vec[r4.x].xyz, v1.xyz);
    r6.z = dot(u_bone_vec[r4.y].xyz, v1.xyz);
    r7.x = dot(u_bone_vec[r2.w].xyzw, v0.xyzw);
    r7.y = dot(u_bone_vec[r4.x].xyzw, v0.xyzw);
    r7.z = dot(u_bone_vec[r4.y].xyzw, v0.xyzw);
    r1.w = dot(v6.xyzw, icb[r0.w+0].xyzw);
    r0.xyz = r7.xyz * r1.www + r0.xyz;
    r1.xyz = r6.xyz * r1.www + r1.xyz;
    r2.xyz = r3.xyz * r1.www + r2.xyz;
    r0.w = r5.y;
  }
  r3.xyz = u_world._m10_m11_m12 * r0.yyy;
  r3.xyz = r0.xxx * u_world._m00_m01_m02 + r3.xyz;
  r3.xyz = r0.zzz * u_world._m20_m21_m22 + r3.xyz;
  r3.xyz = v0.www * u_world._m30_m31_m32 + r3.xyz;
  r4.xyz = u_world._m10_m11_m12 * r1.yyy;
  r1.xyw = r1.xxx * u_world._m00_m01_m02 + r4.xyz;
  r1.xyz = r1.zzz * u_world._m20_m21_m22 + r1.xyw;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r4.xyz = u_world._m10_m11_m12 * r2.yyy;
  r4.xyz = r2.xxx * u_world._m00_m01_m02 + r4.xyz;
  r4.xyz = r2.zzz * u_world._m20_m21_m22 + r4.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r5.xyz = r4.yzx * r1.zxy;
  r5.xyz = r1.yzx * r4.zxy + -r5.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r0.w = cmp(1.5 < r0.w);
  if (r0.w != 0) {
    r5.xyz = -r5.xyz;
  }
  r2.xy = u_uv0_trans._m10_m11 * v2.yy;
  r2.xy = v2.xx * u_uv0_trans._m00_m01 + r2.xy;
  o3.xy = u_uv0_trans._m20_m21 + r2.xy;
  r2.xyz = u_head_direction.yyy * u_world._m10_m11_m12;
  r2.xyz = u_head_direction.xxx * u_world._m00_m01_m02 + r2.xyz;
  r2.xyz = u_head_direction.zzz * u_world._m20_m21_m22 + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r6.xyzw = u_vp._m10_m11_m12_m13 * r3.yyyy;
  r6.xyzw = r3.xxxx * u_vp._m00_m01_m02_m03 + r6.xyzw;
  r6.xyzw = r3.zzzz * u_vp._m20_m21_m22_m23 + r6.xyzw;
  r6.xyzw = u_vp._m30_m31_m32_m33 + r6.xyzw;
  r7.xyzw = u_view._m10_m11_m12_m13 * r3.yyyy;
  r7.xyzw = r3.xxxx * u_view._m00_m01_m02_m03 + r7.xyzw;
  r7.xyzw = r3.zzzz * u_view._m20_m21_m22_m23 + r7.xyzw;
  r7.xyzw = u_view._m30_m31_m32_m33 + r7.xyzw;
  r0.w = -r7.w * ShaderDepthBias + r7.z;
  r8.xyzw = u_proj._m10_m11_m12_m13 * r7.yyyy;
  r8.xyzw = r7.xxxx * u_proj._m00_m01_m02_m03 + r8.xyzw;
  r8.xyzw = r0.wwww * u_proj._m20_m21_m22_m23 + r8.xyzw;
  r7.xyzw = r7.wwww * u_proj._m30_m31_m32_m33 + r8.xyzw;
  r0.w = ShaderDepthBias * r6.w;
  r6.z = -r0.w * 0.00999999978 + r6.z;
  r0.w = r7.z * r6.w;
  r7.z = r0.w / r7.w;
  r7.w = r6.w;
  r7.xyzw = r7.xyzw + -r6.xyzw;
  r6.xyzw = ViewDepthFactor * r7.xyzw + r6.xyzw;
  r0.w = u_fog_info.x * u_proj._m22 + u_proj._m32;
  r7.xyz = -u_camera_position.xyz + r3.xyz;
  r1.w = cmp(0 < u_fog_info.w);
  if (r1.w != 0) {
    r1.w = dot(r7.xyz, r7.xyz);
    r2.w = sqrt(r1.w);
    r3.w = cmp(u_fog_info.y >= r2.w);
    if (r3.w != 0) {
      r1.w = rsqrt(r1.w);
      r8.xyz = r7.xyz * r1.www;
      r1.w = -0.00100000005 + r2.w;
      r1.w = min(u_fog_info.x, r1.w);
      r8.xyz = -r8.xyz * r1.www + r7.xyz;
      r1.w = -r8.y + r3.y;
      r2.w = u_fog_info.w * r8.y;
      r2.w = max(-63, r2.w);
      r2.w = min(63, r2.w);
      r1.w = -u_fog_info.z + r1.w;
      r1.w = u_fog_info.w * r1.w;
      r1.w = max(-63, r1.w);
      r1.w = min(63, r1.w);
      r1.w = exp2(-r1.w);
      r1.w = min(1, r1.w);
      r1.w = u_height_fog_density * r1.w;
      r3.w = dot(r8.xyz, r8.xyz);
      r3.w = sqrt(r3.w);
      r1.w = r3.w * r1.w;
      r3.w = exp2(-r2.w);
      r3.w = 1 + -r3.w;
      r2.w = r3.w / r2.w;
      r1.w = r2.w * -r1.w;
      r1.w = exp2(r1.w);
      r1.w = min(1, r1.w);
      o5.y = 1 + -r1.w;
    } else {
      o5.y = 0;
    }
  } else {
    o5.y = 0;
  }
  r1.w = cmp(0 < u_fog_add_info.w);
  if (r1.w != 0) {
    r1.w = dot(r7.xz, r7.xz);
    r1.w = sqrt(r1.w);
    r2.w = cmp(u_fog_add_info.y >= r1.w);
    if (r2.w != 0) {
      r2.w = -0.00100000005 + r1.w;
      r2.w = min(u_fog_add_info.x, r2.w);
      r1.w = -r2.w + r1.w;
      r2.w = -u_fog_add_info.z + r3.y;
      r2.w = u_fog_add_info.w * r2.w;
      r2.w = max(-63, r2.w);
      r2.w = min(63, r2.w);
      r2.w = exp2(-r2.w);
      r2.w = u_fog_add_param.w * r2.w;
      r1.w = r2.w * r1.w;
      r1.w = exp2(-r1.w);
      r1.w = min(1, r1.w);
      o5.z = 1 + -r1.w;
    } else {
      o5.z = 0;
    }
  } else {
    o5.z = 0;
  }
  r1.w = cmp(r6.z >= r0.w);
  r1.w = r1.w ? 1.000000 : 0;
  r0.w = r6.w + -r0.w;
  r0.w = -0.00721347518 * abs(r0.w);
  r0.w = exp2(r0.w);
  r0.w = saturate(u_fog_exp * r0.w);
  r0.w = 1 + -r0.w;
  r0.w = r1.w * r0.w;
  o5.x = saturate(u_fog_color.w * r0.w);
  r7.xyzw = u_lvp[0]._m10_m11_m12_m13 * r3.yyyy;
  r7.xyzw = r3.xxxx * u_lvp[0]._m00_m01_m02_m03 + r7.xyzw;
  r7.xyzw = r3.zzzz * u_lvp[0]._m20_m21_m22_m23 + r7.xyzw;
  o4.xyzw = u_lvp[0]._m30_m31_m32_m33 + r7.xyzw;
  r0.w = cmp(diss_by_model_pos == 1.000000);
  if (r0.w != 0) {
    o6.xyz = r0.xyz;
  } else {
    o6.xyz = r3.xyz;
  }
  r0.xyz = u_camera_position.xyz + -r3.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  p3.x = sqrt(r0.x);
  o7.w = abs(r2.y);
  o0.w = r3.x;
  o0.xyz = r1.xyz;
  o1.w = r3.y;
  o1.xyz = r4.xyz;
  r5.w = r3.z;
  o2.xyzw = r5.xyzw;
  o7.xyz = r2.xyz;
  o9.xyzw = r6.xyzw;
  o8.xyz = v3.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//   using 3Dmigoto v1.3.16 on Wed May  7 20:05:07 2025
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   row_major float4x4 u_world;        // Offset:    0 Size:    64
//   float u_frame_time;                // Offset:   64 Size:     4 [unused]
//   row_major float4x4 u_proj;         // Offset:   80 Size:    64
//   float4 u_fog_info;                 // Offset:  144 Size:    16
//   float u_fog_exp;                   // Offset:  160 Size:     4
//   float4 u_fog_color;                // Offset:  176 Size:    16
//   float u_height_fog_density;        // Offset:  192 Size:     4
//   float4 u_fog_add_info;             // Offset:  208 Size:    16
//   float4 u_fog_add_param;            // Offset:  224 Size:    16
//   float4 u_camera_position;          // Offset:  240 Size:    16
//   float4 u_bone_vec[180];            // Offset:  256 Size:  2880
//   row_major float4x4 u_uv0_trans;    // Offset: 3136 Size:    64
//   float4 u_head_direction;           // Offset: 3200 Size:    16
//   row_major float4x4 u_vp;           // Offset: 3216 Size:    64
//   float ShaderDepthBias;             // Offset: 3280 Size:     4
//   row_major float4x4 u_view;         // Offset: 3296 Size:    64
//   float ViewDepthFactor;             // Offset: 3360 Size:     4
//   row_major float4x4 u_lvp[4];       // Offset: 3376 Size:   256
//   float diss_by_model_pos;           // Offset: 3632 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// COLOR                    0   xyzw        3     NONE   float   xyz
// TANGENT                  0   xyzw        4     NONE   float   xyz
// BLENDINDICES             0   xyzw        5     NONE    uint   xyzw
// BLENDWEIGHT              0   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xyzw        0     NONE   float   xyzw
// TEXCOORD                 2   xyzw        1     NONE   float   xyzw
// TEXCOORD                 3   xyzw        2     NONE   float   xyzw
// TEXCOORD                 4   xy          3     NONE   float   xy
// TEXCOORD                12     z         3     NONE   float     z
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TEXCOORD                10   xyz         5     NONE   float   xyz
// TEXCOORD                11   xyz         6     NONE   float   xyz
// TEXCOORD                14   xyzw        7     NONE   float   xyzw
// TEXCOORD                15   xyz         8     NONE   float   xyz
// SV_Position              0   xyzw        9      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB0[228], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o3.z
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_output o8.xyz
dcl_output_siv o9.xyzw, position
dcl_temps 9
mov r1.xyz, l(0,0,0,0)
mov r2.xyz, l(0,0,0,0)
mov r0.xyzw, l(0,0,0,0)
loop
  ige r1.w, r0.w, l(4)
  breakc_nz r1.w
  ineg r1.w, r0.w
  ult r3.xyz, r0.wwww, l(1, 2, 3, 0)
  and r4.y, r1.w, r3.y
  iadd r5.xy, r0.wwww, l(-3, 1, 0, 0)
  movc r4.z, r3.y, l(0), r5.x
  ieq r4.w, r3.z, l(0)
  mov r4.x, r3.x
  and r3.xyzw, r4.xyzw, v5.xyzw
  or r3.xy, r3.ywyy, r3.xzxx
  or r1.w, r3.y, r3.x
  imul null, r2.w, r1.w, l(3)
  dp3 r3.x, cb0[r2.w + 16].xyzx, v4.xyzx
  imad r4.xy, r1.wwww, l(3, 3, 0, 0), l(1, 2, 0, 0)
  dp3 r3.y, cb0[r4.x + 16].xyzx, v4.xyzx
  dp3 r3.z, cb0[r4.y + 16].xyzx, v4.xyzx
  dp3 r6.x, cb0[r2.w + 16].xyzx, v1.xyzx
  dp3 r6.y, cb0[r4.x + 16].xyzx, v1.xyzx
  dp3 r6.z, cb0[r4.y + 16].xyzx, v1.xyzx
  dp4 r7.x, cb0[r2.w + 16].xyzw, v0.xyzw
  dp4 r7.y, cb0[r4.x + 16].xyzw, v0.xyzw
  dp4 r7.z, cb0[r4.y + 16].xyzw, v0.xyzw
  dp4 r1.w, v6.xyzw, icb[r0.w + 0].xyzw
  mad r0.xyz, r7.xyzx, r1.wwww, r0.xyzx
  mad r1.xyz, r6.xyzx, r1.wwww, r1.xyzx
  mad r2.xyz, r3.xyzx, r1.wwww, r2.xyzx
  mov r0.w, r5.y
endloop
mul r3.xyz, r0.yyyy, cb0[1].xyzx
mad r3.xyz, r0.xxxx, cb0[0].xyzx, r3.xyzx
mad r3.xyz, r0.zzzz, cb0[2].xyzx, r3.xyzx
mad r3.xyz, v0.wwww, cb0[3].xyzx, r3.xyzx
mul r4.xyz, r1.yyyy, cb0[1].xyzx
mad r1.xyw, r1.xxxx, cb0[0].xyxz, r4.xyxz
mad r1.xyz, r1.zzzz, cb0[2].xyzx, r1.xywx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mul r4.xyz, r2.yyyy, cb0[1].xyzx
mad r4.xyz, r2.xxxx, cb0[0].xyzx, r4.xyzx
mad r4.xyz, r2.zzzz, cb0[2].xyzx, r4.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mul r5.xyz, r1.zxyz, r4.yzxy
mad r5.xyz, r1.yzxy, r4.zxyz, -r5.xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
lt r0.w, l(1.500000), r0.w
if_nz r0.w
  mov r5.xyz, -r5.xyzx
endif
mul r2.xy, v2.yyyy, cb0[197].xyxx
mad r2.xy, v2.xxxx, cb0[196].xyxx, r2.xyxx
add o3.xy, r2.xyxx, cb0[198].xyxx
mul r2.xyz, cb0[1].xyzx, cb0[200].yyyy
mad r2.xyz, cb0[200].xxxx, cb0[0].xyzx, r2.xyzx
mad r2.xyz, cb0[200].zzzz, cb0[2].xyzx, r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r6.xyzw, r3.yyyy, cb0[202].xyzw
mad r6.xyzw, r3.xxxx, cb0[201].xyzw, r6.xyzw
mad r6.xyzw, r3.zzzz, cb0[203].xyzw, r6.xyzw
add r6.xyzw, r6.xyzw, cb0[204].xyzw
mul r7.xyzw, r3.yyyy, cb0[207].xyzw
mad r7.xyzw, r3.xxxx, cb0[206].xyzw, r7.xyzw
mad r7.xyzw, r3.zzzz, cb0[208].xyzw, r7.xyzw
add r7.xyzw, r7.xyzw, cb0[209].xyzw
mad r0.w, -r7.w, cb0[205].x, r7.z
mul r8.xyzw, r7.yyyy, cb0[6].xyzw
mad r8.xyzw, r7.xxxx, cb0[5].xyzw, r8.xyzw
mad r8.xyzw, r0.wwww, cb0[7].xyzw, r8.xyzw
mad r7.xyzw, r7.wwww, cb0[8].xyzw, r8.xyzw
mul r0.w, r6.w, cb0[205].x
mad r6.z, -r0.w, l(0.010000), r6.z
mul r0.w, r6.w, r7.z
div r7.z, r0.w, r7.w
mov r7.w, r6.w
add r7.xyzw, -r6.xyzw, r7.xyzw
mad r6.xyzw, cb0[210].xxxx, r7.xyzw, r6.xyzw
mad r0.w, cb0[9].x, cb0[7].z, cb0[8].z
add r7.xyz, r3.xyzx, -cb0[15].xyzx
lt r1.w, l(0.000000), cb0[9].w
if_nz r1.w
  dp3 r1.w, r7.xyzx, r7.xyzx
  sqrt r2.w, r1.w
  ge r3.w, cb0[9].y, r2.w
  if_nz r3.w
    rsq r1.w, r1.w
    mul r8.xyz, r1.wwww, r7.xyzx
    add r1.w, r2.w, l(-0.001000)
    min r1.w, r1.w, cb0[9].x
    mad r8.xyz, -r8.xyzx, r1.wwww, r7.xyzx
    add r1.w, r3.y, -r8.y
    mul r2.w, r8.y, cb0[9].w
    max r2.w, r2.w, l(-63.000000)
    min r2.w, r2.w, l(63.000000)
    add r1.w, r1.w, -cb0[9].z
    mul r1.w, r1.w, cb0[9].w
    max r1.w, r1.w, l(-63.000000)
    min r1.w, r1.w, l(63.000000)
    exp r1.w, -r1.w
    min r1.w, r1.w, l(1.000000)
    mul r1.w, r1.w, cb0[12].x
    dp3 r3.w, r8.xyzx, r8.xyzx
    sqrt r3.w, r3.w
    mul r1.w, r1.w, r3.w
    exp r3.w, -r2.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r1.w, -r1.w, r2.w
    exp r1.w, r1.w
    min r1.w, r1.w, l(1.000000)
    add o5.y, -r1.w, l(1.000000)
  else
    mov o5.y, l(0)
  endif
else
  mov o5.y, l(0)
endif
lt r1.w, l(0.000000), cb0[13].w
if_nz r1.w
  dp2 r1.w, r7.xzxx, r7.xzxx
  sqrt r1.w, r1.w
  ge r2.w, cb0[13].y, r1.w
  if_nz r2.w
    add r2.w, r1.w, l(-0.001000)
    min r2.w, r2.w, cb0[13].x
    add r1.w, r1.w, -r2.w
    add r2.w, r3.y, -cb0[13].z
    mul r2.w, r2.w, cb0[13].w
    max r2.w, r2.w, l(-63.000000)
    min r2.w, r2.w, l(63.000000)
    exp r2.w, -r2.w
    mul r2.w, r2.w, cb0[14].w
    mul r1.w, r1.w, r2.w
    exp r1.w, -r1.w
    min r1.w, r1.w, l(1.000000)
    add o5.z, -r1.w, l(1.000000)
  else
    mov o5.z, l(0)
  endif
else
  mov o5.z, l(0)
endif
ge r1.w, r6.z, r0.w
and r1.w, r1.w, l(0x3f800000)
add r0.w, -r0.w, r6.w
mul r0.w, |r0.w|, l(-0.00721347518)
exp r0.w, r0.w
mul_sat r0.w, r0.w, cb0[10].x
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, r1.w
mul_sat o5.x, r0.w, cb0[11].w
mul r7.xyzw, r3.yyyy, cb0[212].xyzw
mad r7.xyzw, r3.xxxx, cb0[211].xyzw, r7.xyzw
mad r7.xyzw, r3.zzzz, cb0[213].xyzw, r7.xyzw
add o4.xyzw, r7.xyzw, cb0[214].xyzw
eq r0.w, cb0[227].x, l(1.000000)
if_nz r0.w
  mov o6.xyz, r0.xyzx
else
  mov o6.xyz, r3.xyzx
endif
add r0.xyz, -r3.xyzx, cb0[15].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt o3.z, r0.x
mov o7.w, |r2.y|
mov o0.w, r3.x
mov o0.xyz, r1.xyzx
mov o1.w, r3.y
mov o1.xyz, r4.xyzx
mov r5.w, r3.z
mov o2.xyzw, r5.xyzw
mov o7.xyz, r2.xyzx
mov o9.xyzw, r6.xyzw
mov o8.xyz, v3.xyzx
ret
// Approximately 187 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
